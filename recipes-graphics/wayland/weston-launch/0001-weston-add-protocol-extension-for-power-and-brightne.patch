#This patch file is from Qualcomm Innovation Center, Inc. and is provided under the following license:
#
#Copyright (c) 2024 Qualcomm Innovation Center, Inc. All rights reserved.
#SPDX-License-Identifier: BSD-3-Clause-Clear
commit 33bdd010af422a7508bed4773a56c0f6e4fe35ad
Author: Devanshi Bansal <quic_devanshi@quicinc.com>
Date:   Thu Nov 21 14:25:27 2024 +0530

    weston: add protocol extension for power and brightness

Upstream-Status: Inappropriate [Downstream]
Signed-off-by: Devanshi Bansal <quic_devanshi@quicinc.com>

diff --git a/clients/meson.build b/clients/meson.build
index eb40d40..a40b5a6 100644
--- a/clients/meson.build
+++ b/clients/meson.build
@@ -47,7 +47,16 @@ simple_clients_enabled = get_option('simple-clients')
 simple_build_all = simple_clients_enabled.contains('all')

 simple_clients = [
-	{
+        {
+                'name': 'qti-extn-test',
+                'sources': [
+                        'weston-qti-extn-test.c',
+                        weston_qti_extn_client_protocol_h,
+                        weston_qti_extn_protocol_c,
+                ],
+                'dep_objs': [ dep_wayland_client, dep_libshared ]
+        },
+        {
		'name': 'damage',
		'sources': [
			'simple-damage.c',
diff --git a/clients/weston-qti-extn-test.c b/clients/weston-qti-extn-test.c
new file mode 100644
index 0000000..53d3c5e
--- /dev/null
+++ b/clients/weston-qti-extn-test.c
@@ -0,0 +1,166 @@
+/*
+* Copyright (c) 2021, The Linux Foundation. All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are
+* met:
+*  * Redistributions of source code must retain the above copyright
+*    notice, this list of conditions and the following disclaimer.
+*  * Redistributions in binary form must reproduce the above
+*    copyright notice, this list of conditions and the following
+*    disclaimer in the documentation and/or other materials provided
+*    with the distribution.
+*  * Neither the name of The Linux Foundation nor the names of its
+*    contributors may be used to endorse or promote products derived
+*    from this software without specific prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+* ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+* BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+* IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*
+* Changes from Qualcomm Innovation Center are provided under the following license:
+*
+* Copyright (c) 2022-2023 Qualcomm Innovation Center, Inc. All rights reserved.
+* SPDX-License-Identifier: BSD-3-Clause-Clear
+*/
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <wayland-client.h>
+#include "weston-qti-extn-client-protocol.h"
+
+#define MAX_DIGITS 5
+
+struct display {
+  struct wl_display *display;
+  struct wl_compositor *compositor;
+  struct weston_qti_extn *qti_extn;
+};
+struct display display;
+
+static void
+global_registry_handler(void *data, struct wl_registry *registry, uint32_t id,
+                        const char *interface, uint32_t version) {
+  printf("Got a registry event for %s id %d\n", interface, id);
+  if (strcmp(interface, "wl_compositor") == 0) {
+    display.compositor = wl_registry_bind(registry, id, &wl_compositor_interface, 1);
+  } else if (strcmp(interface, "weston_qti_extn") == 0) {
+    display.qti_extn = wl_registry_bind(registry, id, &weston_qti_extn_interface, 1);
+  }
+}
+
+static void
+global_registry_remover(void *data, struct wl_registry *registry, uint32_t id) {
+  printf("Got a registry losing event for %d\n", id);
+}
+
+static const struct wl_registry_listener registry_listener = {
+  global_registry_handler,
+  global_registry_remover
+};
+
+long int get_integer_input() {
+  long int integerinput = -1;
+  char *buffer = malloc(sizeof(char) * MAX_DIGITS);
+  if (!buffer) {
+    printf("Failed to allocate memory\n");
+    return -1;
+  }
+
+  memset(buffer, 0, MAX_DIGITS);
+  char *bufferptr = fgets(buffer, MAX_DIGITS, stdin);
+  if (bufferptr == NULL) {
+    return integerinput;
+  }
+
+  char *end_ptr = NULL;
+  integerinput = strtol(bufferptr, &end_ptr, 10);
+  if (bufferptr + strlen(buffer) -1 != end_ptr) {
+    printf("Not an Integer\n");
+    return -1;
+  }
+
+  return integerinput;
+}
+
+int main(int argc, char **argv) {
+  display.display = wl_display_connect(NULL);
+  if (display.display == NULL) {
+    fprintf(stderr, "Can't connect to display\n");
+    exit(1);
+  }
+  printf("connected to display\n");
+
+  // get registry handle
+  struct wl_registry *registry = wl_display_get_registry(display.display);
+  wl_registry_add_listener(registry, &registry_listener, NULL);
+
+  wl_display_dispatch(display.display);
+  wl_display_roundtrip(display.display);
+
+  if (display.compositor == NULL) {
+    fprintf(stderr, "Can't find compositor\n");
+    exit(1);
+  }
+
+  if (display.qti_extn == NULL) {
+    fprintf(stderr, "Can't find weston_qti_extn\n");
+    exit(1);
+  }
+
+  printf("Enter the test case no : \n \
+            1. Power On \n \
+            2. Power Off \n \
+            3. set brightness \n \
+            4. Exit \n");
+  printf("enter your choice : ");
+  long int choice = get_integer_input();
+  int loop = 1;
+  while (1) {
+    switch (choice) {
+      case 1:
+        weston_qti_extn_power_on(display.qti_extn);
+      break;
+      case 2:
+        weston_qti_extn_power_off(display.qti_extn);
+      break;
+      case 3:
+        printf("Enter brightness value : ");
+        uint32_t value = (uint32_t) get_integer_input();
+        weston_qti_extn_set_brightness(display.qti_extn, value);
+      break;
+      case 4:
+        loop = 0;
+      break;
+      default :
+        printf("wrong choice Enter again\n");
+      break;
+    }
+    if (loop == 0) {
+      break;
+    }
+
+    wl_display_roundtrip(display.display);
+
+    printf("Enter the test case no : \n \
+              1. Power On \n \
+              2. Power Off \n \
+              3. set brightness \n \
+              4. Exit \n");
+    printf("enter your choice : ");
+    choice = get_integer_input();
+  }
+
+  wl_display_disconnect(display.display);
+  printf("disconnected from display\n");
+
+  exit(0);
+}
diff --git a/libweston/meson.build b/libweston/meson.build
index 4dc92a6..3457eff 100644
--- a/libweston/meson.build
+++ b/libweston/meson.build
@@ -37,6 +37,7 @@ srcs_libweston = [
	'weston-log-flight-rec.c',
	'weston-log.c',
	'weston-direct-display.c',
+  'weston-qti-extn.c',
	linux_dmabuf_unstable_v1_protocol_c,
	linux_dmabuf_unstable_v1_server_protocol_h,
	linux_explicit_synchronization_unstable_v1_protocol_c,
@@ -75,6 +76,8 @@ srcs_libweston = [
	weston_output_capture_server_protocol_h,
	tablet_unstable_v2_protocol_c,
	tablet_unstable_v2_server_protocol_h,
+  weston_qti_extn_protocol_c,
+  weston_qti_extn_server_protocol_h,
 ]

 subdir('desktop')
diff --git a/libweston/weston-qti-extn.c b/libweston/weston-qti-extn.c
new file mode 100644
index 0000000..a891ac6
--- /dev/null
+++ b/libweston/weston-qti-extn.c
@@ -0,0 +1,127 @@
+/*
+* Copyright (c) 2021, The Linux Foundation. All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are
+* met:
+*  * Redistributions of source code must retain the above copyright
+*    notice, this list of conditions and the following disclaimer.
+*  * Redistributions in binary form must reproduce the above
+*    copyright notice, this list of conditions and the following
+*    disclaimer in the documentation and/or other materials provided
+*    with the distribution.
+*  * Neither the name of The Linux Foundation nor the names of its
+*    contributors may be used to endorse or promote products derived
+*    from this software without specific prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+* ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+* BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+* IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*
+* Changes from Qualcomm Innovation Center are provided under the following license:
+*
+* Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+* SPDX-License-Identifier: BSD-3-Clause-Clear
+*/
+
+#include <assert.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <libweston/libweston.h>
+
+#include "weston-qti-extn-server-protocol.h"
+#include "libweston-internal.h"
+#include "weston-qti-extn.h"
+
+const struct weston_qti_extn_interface weston_qti_extn_impl = {
+  destroy,
+  power_on,
+  power_off,
+  set_brightness
+};
+
+void power_on(struct wl_client *client, struct wl_resource *resource) {
+  struct weston_compositor *compositor;
+  compositor = wl_resource_get_user_data(resource);
+  if (compositor == NULL) {
+    weston_log("error: compositor not found\n");
+    return;
+  }
+
+  weston_compositor_wake(compositor);
+}
+
+void power_off(struct wl_client *client, struct wl_resource *resource) {
+  struct weston_compositor *compositor;
+  compositor = wl_resource_get_user_data(resource);
+  if (compositor == NULL) {
+    weston_log("error: compositor not found\n");
+    return;
+  }
+
+  weston_compositor_sleep(compositor);
+}
+
+void set_brightness(struct wl_client *client, struct wl_resource *resource,
+                    uint32_t brightness_value) {
+  struct weston_compositor *compositor;
+  compositor = wl_resource_get_user_data(resource);
+  if (compositor == NULL) {
+    weston_log("error: compositor not found\n");
+    return;
+  }
+
+  struct weston_output *output;
+  wl_list_for_each(output, &compositor->output_list, link) {
+    if (output) {
+      output->set_backlight(output, brightness_value);
+    }
+  }
+}
+
+void destroy(struct wl_client *client, struct wl_resource *resource) {
+  wl_resource_destroy(resource);
+}
+
+void
+bind_weston_qti_extn(struct wl_client *client, void *data, uint32_t version, uint32_t id) {
+  struct weston_compositor *compositor = data;
+  struct wl_resource *resource;
+
+  weston_log("bind_weston_qti_extn::Invoked\n");
+  resource = wl_resource_create(client, &weston_qti_extn_interface, version, id);
+  if (resource == NULL) {
+    wl_client_post_no_memory(client);
+    return;
+  }
+
+  wl_resource_set_implementation(resource, &weston_qti_extn_impl, compositor, NULL);
+}
+
+/** Advertise weston_qti_extn_setup support
+ *
+ * Calling this initializes the weston_qti_extn protocol support, so that
+ * the interface will be advertised to clients. Essentially it creates a
+ * global. Do not call this function multiple times in the compositor's
+ * lifetime. There is no way to deinit explicitly, globals will be reaped
+ * when the wl_display gets destroyed.
+ *
+ * \param compositor The compositor to init for.
+ * \return Zero on success, -1 on failure.
+ */
+WL_EXPORT int weston_qti_extn_setup(struct weston_compositor *compositor) {
+  weston_log("weston_qti_extn_setup::Invoked\n");
+  if (!wl_global_create(compositor->wl_display, &weston_qti_extn_interface, 1,
+                        compositor, bind_weston_qti_extn)) {
+    return -1;
+  }
+  return 0;
+}
diff --git a/libweston/weston-qti-extn.h b/libweston/weston-qti-extn.h
new file mode 100644
index 0000000..52c710b
--- /dev/null
+++ b/libweston/weston-qti-extn.h
@@ -0,0 +1,70 @@
+/*
+* Copyright (c) 2021, The Linux Foundation. All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are
+* met:
+*  * Redistributions of source code must retain the above copyright
+*    notice, this list of conditions and the following disclaimer.
+*  * Redistributions in binary form must reproduce the above
+*    copyright notice, this list of conditions and the following
+*    disclaimer in the documentation and/or other materials provided
+*    with the distribution.
+*  * Neither the name of The Linux Foundation nor the names of its
+*    contributors may be used to endorse or promote products derived
+*    from this software without specific prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+* ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+* BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+* IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*
+* Changes from Qualcomm Innovation Center are provided under the following license:
+*
+* Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+* SPDX-License-Identifier: BSD-3-Clause-Clear
+*/
+
+#ifndef WESTON_POWERMODE_BACKLIGHT_BACKEND_H
+#define WESTON_POWERMODE_BACKLIGHT_BACKEND_H
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include <stdlib.h>
+#include <stdio.h>
+
+void destroy(struct wl_client *client, struct wl_resource *resource);
+
+void power_on(struct wl_client *client, struct wl_resource *resource);
+
+void power_off(struct wl_client *client, struct wl_resource *resource);
+
+void set_brightness(struct wl_client *client, struct wl_resource *resource,
+                    uint32_t brightness_value);
+
+/** Advertise weston_qti_extn_setup support
+ *
+ * Calling this initializes the weston_qti_extn protocol support, so that
+ * the interface will be advertised to clients. Essentially it creates a
+ * global. Do not call this function multiple times in the compositor's
+ * lifetime. There is no way to deinit explicitly, globals will be reaped
+ * when the wl_display gets destroyed.
+ *
+ * \param compositor The compositor to init for.
+ * \return Zero on success, -1 on failure.
+ */
+int weston_qti_extn_setup(struct weston_compositor *compositor);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* WESTON_POWERMODE_BACKLIGHT_BACKEND_H */
diff --git a/protocol/meson.build b/protocol/meson.build
index b055816..0d6bbb7 100644
--- a/protocol/meson.build
+++ b/protocol/meson.build
@@ -11,6 +11,7 @@ install_data(
		'weston-debug.xml',
		'weston-direct-display.xml',
		'weston-output-capture.xml',
+    'weston-qti-extn.xml',
	],
	install_dir: join_paths(dir_data, dir_protocol_libweston)
 )
@@ -36,6 +37,7 @@ generated_protocols = [
	[ 'weston-debug', 'internal' ],
	[ 'weston-desktop-shell', 'internal' ],
	[ 'weston-output-capture', 'internal' ],
+  [ 'weston-qti-extn', 'internal' ],
	[ 'weston-content-protection', 'internal' ],
	[ 'weston-test', 'internal' ],
	[ 'weston-touch-calibration', 'internal' ],
diff --git a/protocol/weston-qti-extn.xml b/protocol/weston-qti-extn.xml
new file mode 100644
index 0000000..7377bf8
--- /dev/null
+++ b/protocol/weston-qti-extn.xml
@@ -0,0 +1,69 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<protocol name="weston_qti_extn">
+
+  <copyright>
+    Copyright (c) 2021 The Linux Foundation. All rights reserved.
+
+    Redistribution and use in source and binary forms, with or without
+    modification, are permitted provided that the following conditions are
+    met:
+        * Redistributions of source code must retain the above copyright
+          notice, this list of conditions and the following disclaimer.
+        * Redistributions in binary form must reproduce the above
+          copyright notice, this list of conditions and the following
+          disclaimer in the documentation and/or other materials provided
+          with the distribution.
+        * Neither the name of The Linux Foundation nor the names of its
+          contributors may be used to endorse or promote products derived
+          from this software without specific prior written permission.
+
+    THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+    WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+    ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+    BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+    OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+    IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+    Changes from Qualcomm Innovation Center are provided under the following license:
+    Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+    SPDX-License-Identifier: BSD-3-Clause-Clear
+  </copyright>
+
+  <interface name="weston_qti_extn" version="1">
+    <description summary="Qualcomm Technologies, Inc extension">
+    This interface used to create several customized apis.
+    </description>
+
+    <request name="destroy" type="destructor">
+      <description summary="unbind the factory">
+        Destroy the protocol object created at client.
+      </description>
+    </request>
+
+    <request name="power_on">
+      <description summary="power on display">
+        This will resume/awake the display.
+      </description>
+    </request>
+
+    <request name="power_off">
+      <description summary="power off display">
+        This will suspend the display.
+      </description>
+    </request>
+
+    <request name="set_brightness">
+      <description summary="set display brightness">
+        This will set the display brightness.
+      </description>
+      <arg name="brightness_value" type="uint" summary="sets the brightness value"/>
+    </request>
+
+  </interface>
+
+</protocol>
